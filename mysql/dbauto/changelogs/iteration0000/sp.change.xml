<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

	<preConditions>
		<dbms type="mysql" />
	</preConditions>

	<changeSet id="1" author="steven">
		<sql>
			DROP PROCEDURE IF EXISTS cat2amount;
		</sql>
		<createProcedure>
			CREATE PROCEDURE cat2amount(INOUT cats TEXT, INOUT amounts TEXT, OUT cat INT, OUT amount
			DECIMAL(32,2))
			DETERMINISTIC NO SQL
			BEGIN
			SET cat=substring_index(cats,',',1);
			SET cats=substring(cats,locate(',',cats)+1);
			SET
			amount=substring_index(amounts,',',1);
			SET amounts=substring(amounts,locate(',',amounts)+1);
			END
		</createProcedure>
	</changeSet>

	<changeSet id="2" author="steven">
		<sql>
			DROP PROCEDURE IF EXISTS bet;
		</sql>
		<createProcedure>
			<![CDATA[
			CREATE PROCEDURE bet(round_id BIGINT,player_id BIGINT,player_table_id INT,bet_cats TEXT, bet_amounts TEXT,total_amount DECIMAL(32,2)) 
			MODIFIES SQL DATA
			BEGIN				
				DECLARE bet_bundle_id BIGINT;
				DECLARE balance_before DECIMAL(32,2);
				DECLARE balance_after DECIMAL(32,2);
				DECLARE now BIGINT;
				DECLARE fail BOOL DEFAULT FALSE;
				DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET fail=TRUE;
				START TRANSACTION;
				SELECT balance INTO balance_before FROM players WHERE id=player_id FOR UPDATE;
				IF ROW_COUNT() = 1 THEN
					SET balance_after = balance_before - total_amount;
					IF balance_after >=0 THEN
						SET now = UNIX_TIMESTAMP()*1000;
						INSERT INTO bet_bundles (round_id,player_id,player_table_id,bet_cats,bet_amounts,total_amount,create_time) VALUES (round_id,player_id,player_table_id,bet_cats,bet_amounts,total_amount,now);
						SELECT LAST_INSERT_ID() INTO bet_bundle_id;
						UPDATE players SET balance=balance_after WHERE id=player_id;
						SELECT 0 as status,bet_bundle_id,balance_before,balance_after;
					ELSE
						SET fail=TRUE;
						SELECT -2 as status,NULL as bet_bundle_id,balance_before,balance_after;
					END IF;
				ELSE
					SELECT -1 as status,NULL as bet_bundle_id,NULL as balance_before,NULL as balance_after;
					SET fail=TRUE;
				END IF;
				IF fail THEN
					ROLLBACK;
				ELSE
					COMMIT;
				END IF;
			END
			]]>
		</createProcedure>
	</changeSet>

	<changeSet id="3" author="steven">
		<sql>
			DROP PROCEDURE IF EXISTS payout;
		</sql>
		<createProcedure>
			<![CDATA[
			CREATE PROCEDURE payout(round_id BIGINT,player_id BIGINT,player_table_id INT,bet_bundle_ids TEXT, payout_amounts TEXT,total_amount DECIMAL(32,2)) 
			MODIFIES SQL DATA
			BEGIN
				
				
				
				DECLARE payout_bundle_id BIGINT;
				DECLARE balance_before DECIMAL(32,2);
				DECLARE balance_after DECIMAL(32,2);
				DECLARE now BIGINT;
				DECLARE fail BOOL DEFAULT FALSE;
				DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET fail=TRUE;
				START TRANSACTION;
				SELECT balance INTO balance_before FROM players WHERE id=player_id FOR UPDATE;
				IF ROW_COUNT() = 1 THEN
					SET balance_after = balance_before + total_amount;
					SET now = UNIX_TIMESTAMP()*1000;
					INSERT INTO payout_bundles (round_id,player_id,player_table_id,bet_bundle_ids,payout_amounts,total_amount,create_time) VALUES (round_id,player_id,player_table_id,bet_bundle_ids,payout_amounts,total_amount,now);
					SELECT LAST_INSERT_ID() INTO payout_bundle_id;
					UPDATE players SET balance=balance_after WHERE id=player_id;
					SELECT 0 as status,payout_bundle_id,balance_before,balance_after;
				ELSE
					SELECT -1 as status,NULL as payout_bundle_id,NULL as balance_before,NULL as balance_after;
					SET fail=TRUE;
				END IF;
				IF fail THEN
					ROLLBACK;
				ELSE
					COMMIT;
				END IF;
			END
			]]>
		</createProcedure>
	</changeSet>

</databaseChangeLog>
